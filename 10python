{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "8f66e7fd",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "#객체 지향 프로그래밍 (Object-Oriented Programming: OOP)\n",
    "#객체 : Object, 클래스로 선언하여 만든 실제 데이터 인스턴스(instance)\n",
    "#포인트 1) 상태 + 행위로 객체를 구분함\n",
    "#포인트 2) 클래스는 객체를 생성하기위한 설계도"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "613ee44b",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3\n",
      "7\n",
      "12\n"
     ]
    }
   ],
   "source": [
    "r = 0\n",
    "\n",
    "def add(n):\n",
    "    global r  \n",
    "    r += n\n",
    "    return r\n",
    "\n",
    "print(add(3))\n",
    "print(add(4))\n",
    "print(add(5))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "f8fd1612",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3\n",
      "7\n",
      "3\n",
      "8\n"
     ]
    }
   ],
   "source": [
    "r1 = 0\n",
    "r2 = 0\n",
    "\n",
    "def add1(n):\n",
    "    global r1  \n",
    "    r1 += n\n",
    "    return r1\n",
    "\n",
    "def add2(n):\n",
    "    global r2  \n",
    "    r2 += n\n",
    "    return r2\n",
    "\n",
    "print(add1(3))\n",
    "print(add1(4))\n",
    "print(add2(3))\n",
    "print(add2(5))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "13e342b4",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3\n",
      "7\n",
      "3\n",
      "8\n"
     ]
    }
   ],
   "source": [
    "class Cal:\n",
    "    def __init__(self):\n",
    "        self.result = 0\n",
    "    def add(self, n):\n",
    "        self.result += n\n",
    "        return self.result\n",
    "\n",
    "c1 = Cal()\n",
    "c2 = Cal()\n",
    "\n",
    "print(c1.add(3))\n",
    "print(c1.add(4))\n",
    "print(c2.add(3))\n",
    "print(c2.add(5))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "1857152d",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "#클래스는 일종의 틀이며 그걸로 만드는 것이 객체이다.\n",
    "#클래스로 만든 객체를 인스턴스라고 한다.\n",
    "#즉, 인스턴스는 어떤 클래스로 만들었는지가 명시될 때 주로 사용한다."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "d789fcf6",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cl = Cal()\n",
    "cl.add(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "0eafaa33",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "지구는 4006년에 멸망한다.\n",
      "지구는 40006년에 멸망한다.\n"
     ]
    }
   ],
   "source": [
    "#클래스 변수 공유\n",
    "class Ser:\n",
    "    s1 = \"지구는 4006년에 멸망한다.\"\n",
    "    s2 = \"지구는 40006년에 멸망한다.\"\n",
    "a = Ser()\n",
    "print(a.s1)\n",
    "print(a.s2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "63e80a25",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "지구가 4006년에 멸망한다는 사실은 뻥이다.\n",
      "지구는 40006년에 멸망한다.\n"
     ]
    }
   ],
   "source": [
    "Ser.s1 = \"지구가 4006년에 멸망한다는 사실은 뻥이다.\"\n",
    "print(a.s1)\n",
    "print(a.s2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "e3a92233",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1 + 1 = 2이다.\n"
     ]
    }
   ],
   "source": [
    "#클래스 내부의 함수 : 매서드(method)\n",
    "#매서드의 첫번째 파라미터는 자신을 전달하므로 주로 self라는 이름을 사용함.\n",
    "#다른이름을 써도 작동하나 가독성이 떨어짐.\n",
    "\n",
    "class Ser:\n",
    "    s = \"지구는 4006년에 멸망한다.\"\n",
    "    def sum(selfs, a, b):      \n",
    "        r = a + b\n",
    "        print(\"%d + %d = %d이다.\" %(a, b, r)) \n",
    "\n",
    "a = Ser()\n",
    "a.sum(1,1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "e82e5032",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "박달도사 님, 1 + 1 = 2입이다.\n"
     ]
    }
   ],
   "source": [
    "class Ser:\n",
    "    s = \"지구는 4006년에 멸망한다.\"\n",
    "    def setname(self, n):\n",
    "        self.name = n\n",
    "        \n",
    "    def sum(self, a, b):      \n",
    "        result = a + b\n",
    "        print(\"%s 님, %d + %d = %d입이다.\" %(self.name, a, b, result)) \n",
    "\n",
    "a = Ser()\n",
    "a.setname(\"박달도사\")\n",
    "a.sum(1,1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "892c9f68",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "k = Ser()\n",
    "k.name = \"박정보\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "a765dc1d",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "지구는 4006년에 멸망한다.\n",
      "박정보\n"
     ]
    }
   ],
   "source": [
    "print(k.s)\n",
    "print(k.name)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "b3c629a1",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "class Ser:\n",
    "    sec = \"지구는 4006년에 멸망한다.\"\n",
    "    def __init__(self, name):\n",
    "        self.name = name\n",
    "        \n",
    "    def sum(self, a, b):      \n",
    "        r = a + b\n",
    "        print(\"%s 님, %d + %d = %d입이다.\" %(self.name, a, b, r)) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "c01772b1",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "Ser.__init__() missing 1 required positional argument: 'name'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[14], line 1\u001b[0m\n\u001b[0;32m----> 1\u001b[0m lee \u001b[38;5;241m=\u001b[39m Ser()\n",
      "\u001b[0;31mTypeError\u001b[0m: Ser.__init__() missing 1 required positional argument: 'name'"
     ]
    }
   ],
   "source": [
    "lee = Ser()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e239b29e",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "lee = Ser(\"수달도사\")\n",
    "lee.sum(2,3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "03275749",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "__main__.FC"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#사칙연산을 할 수 있는 클래스 Fourcal\n",
    "class FC:\n",
    "    pass\n",
    "\n",
    "a = FC()\n",
    "type(a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "fa39bd18",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "4\n",
      "2\n"
     ]
    }
   ],
   "source": [
    "class FC:\n",
    "    def setdata(self, first, second):\n",
    "        self.first = first\n",
    "        self.second = second\n",
    "        \n",
    "a = FC()\n",
    "a.setdata(4,2)\n",
    "print(a.first)\n",
    "print(a.second)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f6e049b0",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "6\n"
     ]
    }
   ],
   "source": [
    "class Fo:\n",
    "    def setdata(self, f, s):\n",
    "        self.first = f\n",
    "        self.second = s\n",
    "    def sum(self):\n",
    "        r = self.first + self.second\n",
    "        return r\n",
    "\n",
    "a = Fo()\n",
    "a.setdata(4,2)\n",
    "print(a.sum())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "ebeed371",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "6\n",
      "8\n",
      "2\n",
      "2.0\n"
     ]
    }
   ],
   "source": [
    "class Fo:\n",
    "    def setdata(self, f, s):\n",
    "        self.first = f\n",
    "        self.second = s\n",
    "    def sum(self):\n",
    "        r = self.first + self.second\n",
    "        return r\n",
    "    def mul(self):\n",
    "        r = self.first * self.second\n",
    "        return r\n",
    "    def sub(self):\n",
    "        r = self.first - self.second\n",
    "        return r\n",
    "    def div(self):\n",
    "        r = self.first / self.second\n",
    "        return r\n",
    "\n",
    "a = Fo()\n",
    "a.setdata(4,2)\n",
    "print(a.sum())\n",
    "print(a.mul())\n",
    "print(a.sub())\n",
    "print(a.div())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f97ef1ad",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f5084cf0-13b3-4b2f-b28f-6f47530f710c",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
